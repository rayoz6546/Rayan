# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI/launcher.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
from signals.train_signals import TrainSignals
from train_controller.train_controller_manager import TrainControllerManager
from train_model.train_model import TrainModel
from train_model.train_model_manager import TrainModelManager
from signals.track_signals import TrackSignals
from TrackControllerSoftware.TrackControllerSoftware import Track_Controller
from signals.trackcontroller_signals import TrackCTCSignals
from CTC.ctc import CTC

from track_model.track_model_ui import TrackModelMainUI
from track_model.track_model_test_ui import TrackModelUiTest
from track_model.track_model import TrackModel


class Launcher(QMainWindow):
    def __init__(self):
        ctc_signals = TrackCTCSignals()
        track_signals = TrackSignals()

        self._ctc = CTC(ctc_signals)
        self._trc = Track_Controller(
            ctc_signals=ctc_signals, track_signals=track_signals
        )

        self._trm = TrackModel(track_signals)
        train_signals = {}
        self._tcm = TrainControllerManager(train_signals)

        self._train_model_manager = TrainModelManager(
            train_signals, track_signals.signals_trackToTrain
        )

        super().__init__()
        self.setupUi()
        self.show()

    def setupUi(self):
        self.setObjectName("self")
        self.resize(291, 380)
        self.setStyleSheet("background-color: rgb(18, 18, 18)")
        self.ctc_btn = QtWidgets.QPushButton(self)
        self.ctc_btn.setGeometry(QtCore.QRect(50, 30, 200, 41))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(13)
        self.ctc_btn.setFont(font)
        self.ctc_btn.setStyleSheet(
            "background-color: rgb(63, 63, 63);\n" "color: rgb(255, 255, 255)"
        )
        self.ctc_btn.setObjectName("ctc_btn")
        self.wayside_btn = QtWidgets.QPushButton(self)
        self.wayside_btn.setGeometry(QtCore.QRect(50, 90, 200, 41))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(13)
        self.wayside_btn.setFont(font)
        self.wayside_btn.setStyleSheet(
            "background-color: rgb(63, 63, 63);\n" "color: rgb(255, 255, 255)"
        )
        self.wayside_btn.setObjectName("wayside_btn")
        self.trm_btn = QtWidgets.QPushButton(self)
        self.trm_btn.setGeometry(QtCore.QRect(50, 150, 200, 41))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(13)
        self.trm_btn.setFont(font)
        self.trm_btn.setStyleSheet(
            "background-color: rgb(63, 63, 63);\n" "color: rgb(255, 255, 255)"
        )
        self.trm_btn.setObjectName("trm_btn")
        # self.tm_btn = QtWidgets.QPushButton(self)
        # self.tm_btn.setGeometry(QtCore.QRect(50, 210, 200, 41))
        # font = QtGui.QFont()
        # font.setFamily("Sans Serif Collection")
        # font.setPointSize(13)
        # self.tm_btn.setFont(font)
        # self.tm_btn.setStyleSheet(
        #     "background-color: rgb(63, 63, 63);\n" "color: rgb(255, 255, 255)"
        # )
        self.tm_btn = QtWidgets.QPushButton(self)
        self.tm_btn.setStyleSheet(
            "QPushButton:disabled {\n"
            "background-color: rgb(63, 63, 63);\n"
            "color:rgb(90,90,90);\n"
            "}\n"
            "QPushButton:enabled{\n"
            "background-color: rgb(63, 63, 63);\n"
            "color: rgb(255, 255, 255);\n"
            "}\n"
            "\n"
            ""
        )
        self.tm_btn.setGeometry(QtCore.QRect(50, 210, 200, 41))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(13)
        self.tm_btn.setFont(font)
        self.tm_btn.setObjectName("tm_btn")

        self.tc_btn = QtWidgets.QPushButton(self)
        self.tc_btn.setStyleSheet(
            "QPushButton:disabled {\n"
            "background-color: rgb(63, 63, 63);\n"
            "color:rgb(90,90,90);\n"
            "}\n"
            "QPushButton:enabled{\n"
            "background-color: rgb(63, 63, 63);\n"
            "color: rgb(255, 255, 255);\n"
            "}\n"
            "\n"
            ""
        )
        self.tc_btn.setGeometry(QtCore.QRect(50, 290, 200, 41))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(13)
        self.tc_btn.setFont(font)

        self.tc_btn.setObjectName("tc_btn")
        self.tc_sel = ComboBox(self)
        self.tc_sel.popupAboutToBeShown.connect(self._get_train_controllers)

        self.tc_sel.setGeometry(QtCore.QRect(50, 331, 200, 22))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        self.tc_sel.setStyleSheet(
            "QComboBox QAbstractItemView {\n"
            "background: rgb(63, 63, 63);\n"
            "color: rgb(255, 255, 255);\n"
            "}\n"
            "QComboBox {"
            "background: rgb(63, 63, 63);\n"
            "color: rgb(255, 255, 255)"
            "}"
        )
        self.tc_sel.setFont(font)
        self.tc_sel.setObjectName("tc_sel")

        self.tm_sel = ComboBox(self)
        self.tm_sel.popupAboutToBeShown.connect(self.get_train_models)
        self.tm_sel.setGeometry(QtCore.QRect(50, 251, 200, 22))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        self.tm_sel.setStyleSheet(
            "QComboBox QAbstractItemView {\n"
            "background: rgb(63, 63, 63);\n"
            "color: rgb(255, 255, 255);\n"
            "}\n"
            "QComboBox {"
            "background: rgb(63, 63, 63);\n"
            "color: rgb(255, 255, 255)"
            "}"
        )
        self.tm_sel.setFont(font)
        self.tm_sel.setObjectName("tm_sel")

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.tc_btn.clicked.connect(self._launch_tc)

        self.tm_btn.clicked.connect(self.launch_train_model)
        self.ctc_btn.clicked.connect(self._ctc.launch_main_ui)

        self.wayside_btn.clicked.connect(self._trc.launch_tr_controller)

        self.trm_btn.clicked.connect(self._trm.launch_main_ui)
        self.trm_btn.clicked.connect(self._trm.launch_test_ui)
        self._handler()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "Launcher"))
        self.ctc_btn.setText(_translate("self", "CTC"))
        self.wayside_btn.setText(_translate("self", "Track Controller"))
        self.trm_btn.setText(_translate("self", "Track Model"))
        self.tm_btn.setText(_translate("self", "Train Model"))
        self.tc_btn.setText(_translate("self", "Train Controller"))

    def _handler(self):
        self.timer = QtCore.QTimer(self)
        self.timer.setInterval(100)
        self.timer.timeout.connect(self._update)
        self.timer.start()

    def _update(self):
        if self.tc_sel.currentText() == "":
            self.tc_btn.setDisabled(True)
        else:
            self.tc_btn.setDisabled(False)

        if self.tm_sel.currentText() == "":
            self.tm_btn.setDisabled(True)
        else:
            self.tm_btn.setDisabled(False)

    def _get_train_controllers(self):
        self.tc_sel.clear()
        self.tc_sel.addItems([f"train #{id+1}" for id in self._tcm.get_ids()])

    def _launch_tc(self):
        id = int(self.tc_sel.currentText()[-1]) - 1
        self._tcm.launch_ui(id)

    def get_train_models(self):
        self.tm_sel.clear()
        self.tm_sel.addItems(
            [f"train #{id+1}" for id in self._train_model_manager.get_ids()]
        )

    def launch_train_model(self):
        id = int(self.tm_sel.currentText()[-1]) - 1
        self._train_model_manager.launch_ui(id)


class ComboBox(QtWidgets.QComboBox):
    popupAboutToBeShown = QtCore.pyqtSignal()

    def showPopup(self):
        self.popupAboutToBeShown.emit()
        super(ComboBox, self).showPopup()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    e = Launcher()
    sys.exit(app.exec_())
