import heapq
#class ListNode:
#    def __init__(self, data, next=None):
#        self.data = data
#        self.next = next

class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        r = ListNode()
        p = r
        h = []
        count = 0
        for i in range(len(lists)):
            if lists[i]:
                heapq.heappush(h, (lists[i].val, count, lists[i]))
                count = count + 1
        while(len(h)):
            p_smallest = heapq.heappop(h)[2]
            p.next = p_smallest
            p = p.next
            if p_smallest.next:
                heapq.heappush(h, (p_smallest.next.val, count, p_smallest.next))
                count = count + 1
        return r.next 