// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hw_conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.631000,HLS_SYN_LAT=262661,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=360,HLS_SYN_LUT=660,HLS_VERSION=2018_3}" *)

module hw_conv (
        ap_clk,
        ap_rst_n,
        sin_TDATA,
        sin_TVALID,
        sin_TREADY,
        sin_TKEEP,
        sin_TSTRB,
        sin_TUSER,
        sin_TLAST,
        sin_TID,
        sin_TDEST,
        sout_TDATA,
        sout_TVALID,
        sout_TREADY,
        sout_TKEEP,
        sout_TSTRB,
        sout_TUSER,
        sout_TLAST,
        sout_TID,
        sout_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [7:0] sin_TDATA;
input   sin_TVALID;
output   sin_TREADY;
input  [0:0] sin_TKEEP;
input  [0:0] sin_TSTRB;
input  [0:0] sin_TUSER;
input  [0:0] sin_TLAST;
input  [0:0] sin_TID;
input  [0:0] sin_TDEST;
output  [7:0] sout_TDATA;
output   sout_TVALID;
input   sout_TREADY;
output  [0:0] sout_TKEEP;
output  [0:0] sout_TSTRB;
output  [0:0] sout_TUSER;
output  [0:0] sout_TLAST;
output  [0:0] sout_TID;
output  [0:0] sout_TDEST;

 reg    ap_rst_n_inv;
reg   [7:0] sin_V_data_V_0_data_out;
wire    sin_V_data_V_0_vld_in;
wire    sin_V_data_V_0_vld_out;
wire    sin_V_data_V_0_ack_in;
reg    sin_V_data_V_0_ack_out;
reg   [7:0] sin_V_data_V_0_payload_A;
reg   [7:0] sin_V_data_V_0_payload_B;
reg    sin_V_data_V_0_sel_rd;
reg    sin_V_data_V_0_sel_wr;
wire    sin_V_data_V_0_sel;
wire    sin_V_data_V_0_load_A;
wire    sin_V_data_V_0_load_B;
reg   [1:0] sin_V_data_V_0_state;
wire    sin_V_data_V_0_state_cmp_full;
wire    sin_V_dest_V_0_vld_in;
reg    sin_V_dest_V_0_ack_out;
reg   [1:0] sin_V_dest_V_0_state;
reg   [7:0] sout_V_data_V_1_data_out;
reg    sout_V_data_V_1_vld_in;
wire    sout_V_data_V_1_vld_out;
wire    sout_V_data_V_1_ack_in;
wire    sout_V_data_V_1_ack_out;
reg   [7:0] sout_V_data_V_1_payload_A;
reg   [7:0] sout_V_data_V_1_payload_B;
reg    sout_V_data_V_1_sel_rd;
reg    sout_V_data_V_1_sel_wr;
wire    sout_V_data_V_1_sel;
wire    sout_V_data_V_1_load_A;
wire    sout_V_data_V_1_load_B;
reg   [1:0] sout_V_data_V_1_state;
wire    sout_V_data_V_1_state_cmp_full;
wire   [0:0] sout_V_keep_V_1_data_out;
reg    sout_V_keep_V_1_vld_in;
wire    sout_V_keep_V_1_vld_out;
wire    sout_V_keep_V_1_ack_in;
wire    sout_V_keep_V_1_ack_out;
reg    sout_V_keep_V_1_sel_rd;
wire    sout_V_keep_V_1_sel;
reg   [1:0] sout_V_keep_V_1_state;
wire   [0:0] sout_V_strb_V_1_data_out;
reg    sout_V_strb_V_1_vld_in;
wire    sout_V_strb_V_1_vld_out;
wire    sout_V_strb_V_1_ack_in;
wire    sout_V_strb_V_1_ack_out;
reg    sout_V_strb_V_1_sel_rd;
wire    sout_V_strb_V_1_sel;
reg   [1:0] sout_V_strb_V_1_state;
wire   [0:0] sout_V_user_V_1_data_out;
reg    sout_V_user_V_1_vld_in;
wire    sout_V_user_V_1_vld_out;
wire    sout_V_user_V_1_ack_in;
wire    sout_V_user_V_1_ack_out;
reg    sout_V_user_V_1_sel_rd;
wire    sout_V_user_V_1_sel;
reg   [1:0] sout_V_user_V_1_state;
reg   [0:0] sout_V_last_V_1_data_out;
reg    sout_V_last_V_1_vld_in;
wire    sout_V_last_V_1_vld_out;
wire    sout_V_last_V_1_ack_in;
wire    sout_V_last_V_1_ack_out;
reg   [0:0] sout_V_last_V_1_payload_A;
reg   [0:0] sout_V_last_V_1_payload_B;
reg    sout_V_last_V_1_sel_rd;
reg    sout_V_last_V_1_sel_wr;
wire    sout_V_last_V_1_sel;
wire    sout_V_last_V_1_load_A;
wire    sout_V_last_V_1_load_B;
reg   [1:0] sout_V_last_V_1_state;
wire    sout_V_last_V_1_state_cmp_full;
wire   [0:0] sout_V_id_V_1_data_out;
reg    sout_V_id_V_1_vld_in;
wire    sout_V_id_V_1_vld_out;
wire    sout_V_id_V_1_ack_in;
wire    sout_V_id_V_1_ack_out;
reg    sout_V_id_V_1_sel_rd;
wire    sout_V_id_V_1_sel;
reg   [1:0] sout_V_id_V_1_state;
wire   [0:0] sout_V_dest_V_1_data_out;
reg    sout_V_dest_V_1_vld_in;
wire    sout_V_dest_V_1_vld_out;
wire    sout_V_dest_V_1_ack_in;
wire    sout_V_dest_V_1_ack_out;
reg    sout_V_dest_V_1_sel_rd;
wire    sout_V_dest_V_1_sel;
reg   [1:0] sout_V_dest_V_1_state;
reg    sin_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond1_fu_253_p2;
wire   [0:0] tmp_fu_277_p3;
reg    sout_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_3_reg_638;
reg   [0:0] tmp_3_reg_638_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_3_reg_638_pp0_iter2_reg;
reg   [18:0] i_reg_228;
reg   [18:0] phi_urem_reg_239;
reg   [7:0] kbuf_2_1_1_reg_603;
reg    ap_predicate_op49_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond1_reg_609;
wire   [18:0] i_1_fu_259_p2;
reg   [8:0] lbuf_0_addr_reg_618;
wire   [0:0] tmp_5_fu_271_p2;
reg   [0:0] tmp_5_reg_624;
reg   [8:0] lbuf_1_addr_reg_629;
wire   [0:0] tmp_3_fu_294_p2;
wire   [0:0] tmp_last_V_fu_300_p2;
reg   [0:0] tmp_last_V_reg_642;
reg   [0:0] tmp_last_V_reg_642_pp0_iter1_reg;
wire   [18:0] idx_urem_fu_318_p3;
reg   [7:0] kbuf_2_0_load_6_reg_652;
wire   [11:0] result_2_1_1_fu_457_p2;
reg   [11:0] result_2_1_1_reg_657;
wire   [9:0] tmp6_fu_484_p2;
reg   [9:0] tmp6_reg_662;
wire   [7:0] tmp_V_fu_543_p3;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter1_state3;
wire   [8:0] lbuf_0_address0;
reg    lbuf_0_ce0;
wire   [7:0] lbuf_0_q0;
reg    lbuf_0_ce1;
reg    lbuf_0_we1;
wire   [8:0] lbuf_1_address0;
reg    lbuf_1_ce0;
wire   [7:0] lbuf_1_q0;
reg    lbuf_1_ce1;
reg    lbuf_1_we1;
wire   [63:0] tmp_1_fu_265_p1;
reg   [7:0] kbuf_0_0_fu_108;
reg   [7:0] kbuf_0_1_fu_112;
reg   [7:0] kbuf_1_0_s_fu_116;
reg   [7:0] kbuf_1_0_fu_120;
reg   [7:0] kbuf_1_1_fu_124;
wire   [7:0] kbuf_1_2_1_fu_379_p3;
reg   [7:0] kbuf_2_0_s_fu_128;
reg   [7:0] kbuf_2_0_fu_132;
reg   [7:0] kbuf_2_1_fu_136;
reg    ap_block_pp0_stage0_01001;
wire   [18:0] next_urem_fu_306_p2;
wire   [0:0] tmp_8_fu_312_p2;
wire   [8:0] tmp_16_cast_fu_399_p1;
wire   [8:0] tmp_16_0_1_cast_fu_403_p1;
wire   [8:0] tmp1_fu_415_p2;
wire   [8:0] tmp_16_1_cast_fu_411_p1;
wire   [8:0] tmp_16_0_2_cast_fu_407_p1;
wire   [8:0] tmp2_fu_425_p2;
wire   [9:0] tmp1_cast_fu_421_p1;
wire   [9:0] tmp2_cast_fu_431_p1;
wire   [9:0] result_2_1_fu_435_p2;
wire   [10:0] p_shl_fu_445_p3;
wire   [11:0] result_2_1_cast_fu_441_p1;
wire   [11:0] p_shl_cast_fu_453_p1;
wire   [8:0] tmp_16_2_2_cast_fu_470_p1;
wire   [8:0] tmp_16_1_2_cast_fu_463_p1;
wire   [8:0] tmp7_fu_474_p2;
wire   [9:0] tmp_16_2_1_cast_fu_467_p1;
wire   [9:0] tmp7_cast_fu_480_p1;
wire   [11:0] tmp_16_2_cast_fu_490_p1;
wire   [11:0] tmp5_fu_493_p2;
wire   [11:0] tmp6_cast_fu_498_p1;
wire   [11:0] result_2_2_2_fu_501_p2;
wire   [3:0] tmp_4_fu_507_p4;
wire   [0:0] icmp_fu_517_p2;
wire   [11:0] p_result_fu_523_p3;
wire   [0:0] tmp_6_fu_531_p3;
wire   [7:0] tmp_7_fu_539_p1;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 sin_V_data_V_0_sel_rd = 1'b0;
#0 sin_V_data_V_0_sel_wr = 1'b0;
#0 sin_V_data_V_0_state = 2'd0;
#0 sin_V_dest_V_0_state = 2'd0;
#0 sout_V_data_V_1_sel_rd = 1'b0;
#0 sout_V_data_V_1_sel_wr = 1'b0;
#0 sout_V_data_V_1_state = 2'd0;
#0 sout_V_keep_V_1_sel_rd = 1'b0;
#0 sout_V_keep_V_1_state = 2'd0;
#0 sout_V_strb_V_1_sel_rd = 1'b0;
#0 sout_V_strb_V_1_state = 2'd0;
#0 sout_V_user_V_1_sel_rd = 1'b0;
#0 sout_V_user_V_1_state = 2'd0;
#0 sout_V_last_V_1_sel_rd = 1'b0;
#0 sout_V_last_V_1_sel_wr = 1'b0;
#0 sout_V_last_V_1_state = 2'd0;
#0 sout_V_id_V_1_sel_rd = 1'b0;
#0 sout_V_id_V_1_state = 2'd0;
#0 sout_V_dest_V_1_sel_rd = 1'b0;
#0 sout_V_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

hw_conv_lbuf_0 #(
    .DataWidth( 8 ),
    .AddressRange( 509 ),
    .AddressWidth( 9 ))
lbuf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lbuf_0_address0),
    .ce0(lbuf_0_ce0),
    .q0(lbuf_0_q0),
    .address1(lbuf_0_addr_reg_618),
    .ce1(lbuf_0_ce1),
    .we1(lbuf_0_we1),
    .d1(kbuf_1_0_s_fu_116)
);

hw_conv_lbuf_0 #(
    .DataWidth( 8 ),
    .AddressRange( 509 ),
    .AddressWidth( 9 ))
lbuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lbuf_1_address0),
    .ce0(lbuf_1_ce0),
    .q0(lbuf_1_q0),
    .address1(lbuf_1_addr_reg_629),
    .ce1(lbuf_1_ce1),
    .we1(lbuf_1_we1),
    .d1(kbuf_2_0_s_fu_128)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sin_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((sin_V_data_V_0_ack_out == 1'b1) & (sin_V_data_V_0_vld_out == 1'b1))) begin
            sin_V_data_V_0_sel_rd <= ~sin_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sin_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((sin_V_data_V_0_ack_in == 1'b1) & (sin_V_data_V_0_vld_in == 1'b1))) begin
            sin_V_data_V_0_sel_wr <= ~sin_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sin_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((sin_V_data_V_0_vld_in == 1'b0) & (sin_V_data_V_0_state == 2'd2)) | ((sin_V_data_V_0_vld_in == 1'b0) & (sin_V_data_V_0_state == 2'd3) & (sin_V_data_V_0_ack_out == 1'b1)))) begin
            sin_V_data_V_0_state <= 2'd2;
        end else if ((((sin_V_data_V_0_ack_out == 1'b0) & (sin_V_data_V_0_state == 2'd1)) | ((sin_V_data_V_0_ack_out == 1'b0) & (sin_V_data_V_0_state == 2'd3) & (sin_V_data_V_0_vld_in == 1'b1)))) begin
            sin_V_data_V_0_state <= 2'd1;
        end else if (((~((sin_V_data_V_0_vld_in == 1'b0) & (sin_V_data_V_0_ack_out == 1'b1)) & ~((sin_V_data_V_0_ack_out == 1'b0) & (sin_V_data_V_0_vld_in == 1'b1)) & (sin_V_data_V_0_state == 2'd3)) | ((sin_V_data_V_0_state == 2'd1) & (sin_V_data_V_0_ack_out == 1'b1)) | ((sin_V_data_V_0_state == 2'd2) & (sin_V_data_V_0_vld_in == 1'b1)))) begin
            sin_V_data_V_0_state <= 2'd3;
        end else begin
            sin_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sin_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((sin_V_dest_V_0_state == 2'd2) & (sin_V_dest_V_0_vld_in == 1'b0)) | ((sin_V_dest_V_0_state == 2'd3) & (sin_V_dest_V_0_vld_in == 1'b0) & (sin_V_dest_V_0_ack_out == 1'b1)))) begin
            sin_V_dest_V_0_state <= 2'd2;
        end else if ((((sin_V_dest_V_0_state == 2'd1) & (sin_V_dest_V_0_ack_out == 1'b0)) | ((sin_V_dest_V_0_state == 2'd3) & (sin_V_dest_V_0_ack_out == 1'b0) & (sin_V_dest_V_0_vld_in == 1'b1)))) begin
            sin_V_dest_V_0_state <= 2'd1;
        end else if (((~((sin_V_dest_V_0_vld_in == 1'b0) & (sin_V_dest_V_0_ack_out == 1'b1)) & ~((sin_V_dest_V_0_ack_out == 1'b0) & (sin_V_dest_V_0_vld_in == 1'b1)) & (sin_V_dest_V_0_state == 2'd3)) | ((sin_V_dest_V_0_state == 2'd1) & (sin_V_dest_V_0_ack_out == 1'b1)) | ((sin_V_dest_V_0_state == 2'd2) & (sin_V_dest_V_0_vld_in == 1'b1)))) begin
            sin_V_dest_V_0_state <= 2'd3;
        end else begin
            sin_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_data_V_1_ack_out == 1'b1) & (sout_V_data_V_1_vld_out == 1'b1))) begin
            sout_V_data_V_1_sel_rd <= ~sout_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((sout_V_data_V_1_ack_in == 1'b1) & (sout_V_data_V_1_vld_in == 1'b1))) begin
            sout_V_data_V_1_sel_wr <= ~sout_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_data_V_1_state == 2'd2) & (sout_V_data_V_1_vld_in == 1'b0)) | ((sout_V_data_V_1_state == 2'd3) & (sout_V_data_V_1_vld_in == 1'b0) & (sout_V_data_V_1_ack_out == 1'b1)))) begin
            sout_V_data_V_1_state <= 2'd2;
        end else if ((((sout_V_data_V_1_state == 2'd1) & (sout_V_data_V_1_ack_out == 1'b0)) | ((sout_V_data_V_1_state == 2'd3) & (sout_V_data_V_1_ack_out == 1'b0) & (sout_V_data_V_1_vld_in == 1'b1)))) begin
            sout_V_data_V_1_state <= 2'd1;
        end else if (((~((sout_V_data_V_1_vld_in == 1'b0) & (sout_V_data_V_1_ack_out == 1'b1)) & ~((sout_V_data_V_1_ack_out == 1'b0) & (sout_V_data_V_1_vld_in == 1'b1)) & (sout_V_data_V_1_state == 2'd3)) | ((sout_V_data_V_1_state == 2'd1) & (sout_V_data_V_1_ack_out == 1'b1)) | ((sout_V_data_V_1_state == 2'd2) & (sout_V_data_V_1_vld_in == 1'b1)))) begin
            sout_V_data_V_1_state <= 2'd3;
        end else begin
            sout_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_dest_V_1_ack_out == 1'b1) & (sout_V_dest_V_1_vld_out == 1'b1))) begin
            sout_V_dest_V_1_sel_rd <= ~sout_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_dest_V_1_state == 2'd2) & (sout_V_dest_V_1_vld_in == 1'b0)) | ((sout_V_dest_V_1_state == 2'd3) & (sout_V_dest_V_1_vld_in == 1'b0) & (sout_V_dest_V_1_ack_out == 1'b1)))) begin
            sout_V_dest_V_1_state <= 2'd2;
        end else if ((((sout_V_dest_V_1_state == 2'd1) & (sout_V_dest_V_1_ack_out == 1'b0)) | ((sout_V_dest_V_1_state == 2'd3) & (sout_V_dest_V_1_ack_out == 1'b0) & (sout_V_dest_V_1_vld_in == 1'b1)))) begin
            sout_V_dest_V_1_state <= 2'd1;
        end else if (((~((sout_V_dest_V_1_vld_in == 1'b0) & (sout_V_dest_V_1_ack_out == 1'b1)) & ~((sout_V_dest_V_1_ack_out == 1'b0) & (sout_V_dest_V_1_vld_in == 1'b1)) & (sout_V_dest_V_1_state == 2'd3)) | ((sout_V_dest_V_1_state == 2'd1) & (sout_V_dest_V_1_ack_out == 1'b1)) | ((sout_V_dest_V_1_state == 2'd2) & (sout_V_dest_V_1_vld_in == 1'b1)))) begin
            sout_V_dest_V_1_state <= 2'd3;
        end else begin
            sout_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_id_V_1_ack_out == 1'b1) & (sout_V_id_V_1_vld_out == 1'b1))) begin
            sout_V_id_V_1_sel_rd <= ~sout_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_id_V_1_state == 2'd2) & (sout_V_id_V_1_vld_in == 1'b0)) | ((sout_V_id_V_1_state == 2'd3) & (sout_V_id_V_1_vld_in == 1'b0) & (sout_V_id_V_1_ack_out == 1'b1)))) begin
            sout_V_id_V_1_state <= 2'd2;
        end else if ((((sout_V_id_V_1_state == 2'd1) & (sout_V_id_V_1_ack_out == 1'b0)) | ((sout_V_id_V_1_state == 2'd3) & (sout_V_id_V_1_ack_out == 1'b0) & (sout_V_id_V_1_vld_in == 1'b1)))) begin
            sout_V_id_V_1_state <= 2'd1;
        end else if (((~((sout_V_id_V_1_vld_in == 1'b0) & (sout_V_id_V_1_ack_out == 1'b1)) & ~((sout_V_id_V_1_ack_out == 1'b0) & (sout_V_id_V_1_vld_in == 1'b1)) & (sout_V_id_V_1_state == 2'd3)) | ((sout_V_id_V_1_state == 2'd1) & (sout_V_id_V_1_ack_out == 1'b1)) | ((sout_V_id_V_1_state == 2'd2) & (sout_V_id_V_1_vld_in == 1'b1)))) begin
            sout_V_id_V_1_state <= 2'd3;
        end else begin
            sout_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_keep_V_1_ack_out == 1'b1) & (sout_V_keep_V_1_vld_out == 1'b1))) begin
            sout_V_keep_V_1_sel_rd <= ~sout_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_keep_V_1_state == 2'd2) & (sout_V_keep_V_1_vld_in == 1'b0)) | ((sout_V_keep_V_1_state == 2'd3) & (sout_V_keep_V_1_vld_in == 1'b0) & (sout_V_keep_V_1_ack_out == 1'b1)))) begin
            sout_V_keep_V_1_state <= 2'd2;
        end else if ((((sout_V_keep_V_1_state == 2'd1) & (sout_V_keep_V_1_ack_out == 1'b0)) | ((sout_V_keep_V_1_state == 2'd3) & (sout_V_keep_V_1_ack_out == 1'b0) & (sout_V_keep_V_1_vld_in == 1'b1)))) begin
            sout_V_keep_V_1_state <= 2'd1;
        end else if (((~((sout_V_keep_V_1_vld_in == 1'b0) & (sout_V_keep_V_1_ack_out == 1'b1)) & ~((sout_V_keep_V_1_ack_out == 1'b0) & (sout_V_keep_V_1_vld_in == 1'b1)) & (sout_V_keep_V_1_state == 2'd3)) | ((sout_V_keep_V_1_state == 2'd1) & (sout_V_keep_V_1_ack_out == 1'b1)) | ((sout_V_keep_V_1_state == 2'd2) & (sout_V_keep_V_1_vld_in == 1'b1)))) begin
            sout_V_keep_V_1_state <= 2'd3;
        end else begin
            sout_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_last_V_1_ack_out == 1'b1) & (sout_V_last_V_1_vld_out == 1'b1))) begin
            sout_V_last_V_1_sel_rd <= ~sout_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((sout_V_last_V_1_ack_in == 1'b1) & (sout_V_last_V_1_vld_in == 1'b1))) begin
            sout_V_last_V_1_sel_wr <= ~sout_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_last_V_1_state == 2'd2) & (sout_V_last_V_1_vld_in == 1'b0)) | ((sout_V_last_V_1_state == 2'd3) & (sout_V_last_V_1_vld_in == 1'b0) & (sout_V_last_V_1_ack_out == 1'b1)))) begin
            sout_V_last_V_1_state <= 2'd2;
        end else if ((((sout_V_last_V_1_state == 2'd1) & (sout_V_last_V_1_ack_out == 1'b0)) | ((sout_V_last_V_1_state == 2'd3) & (sout_V_last_V_1_ack_out == 1'b0) & (sout_V_last_V_1_vld_in == 1'b1)))) begin
            sout_V_last_V_1_state <= 2'd1;
        end else if (((~((sout_V_last_V_1_vld_in == 1'b0) & (sout_V_last_V_1_ack_out == 1'b1)) & ~((sout_V_last_V_1_ack_out == 1'b0) & (sout_V_last_V_1_vld_in == 1'b1)) & (sout_V_last_V_1_state == 2'd3)) | ((sout_V_last_V_1_state == 2'd1) & (sout_V_last_V_1_ack_out == 1'b1)) | ((sout_V_last_V_1_state == 2'd2) & (sout_V_last_V_1_vld_in == 1'b1)))) begin
            sout_V_last_V_1_state <= 2'd3;
        end else begin
            sout_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_strb_V_1_ack_out == 1'b1) & (sout_V_strb_V_1_vld_out == 1'b1))) begin
            sout_V_strb_V_1_sel_rd <= ~sout_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_strb_V_1_state == 2'd2) & (sout_V_strb_V_1_vld_in == 1'b0)) | ((sout_V_strb_V_1_state == 2'd3) & (sout_V_strb_V_1_vld_in == 1'b0) & (sout_V_strb_V_1_ack_out == 1'b1)))) begin
            sout_V_strb_V_1_state <= 2'd2;
        end else if ((((sout_V_strb_V_1_state == 2'd1) & (sout_V_strb_V_1_ack_out == 1'b0)) | ((sout_V_strb_V_1_state == 2'd3) & (sout_V_strb_V_1_ack_out == 1'b0) & (sout_V_strb_V_1_vld_in == 1'b1)))) begin
            sout_V_strb_V_1_state <= 2'd1;
        end else if (((~((sout_V_strb_V_1_vld_in == 1'b0) & (sout_V_strb_V_1_ack_out == 1'b1)) & ~((sout_V_strb_V_1_ack_out == 1'b0) & (sout_V_strb_V_1_vld_in == 1'b1)) & (sout_V_strb_V_1_state == 2'd3)) | ((sout_V_strb_V_1_state == 2'd1) & (sout_V_strb_V_1_ack_out == 1'b1)) | ((sout_V_strb_V_1_state == 2'd2) & (sout_V_strb_V_1_vld_in == 1'b1)))) begin
            sout_V_strb_V_1_state <= 2'd3;
        end else begin
            sout_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sout_V_user_V_1_ack_out == 1'b1) & (sout_V_user_V_1_vld_out == 1'b1))) begin
            sout_V_user_V_1_sel_rd <= ~sout_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sout_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((sout_V_user_V_1_state == 2'd2) & (sout_V_user_V_1_vld_in == 1'b0)) | ((sout_V_user_V_1_state == 2'd3) & (sout_V_user_V_1_vld_in == 1'b0) & (sout_V_user_V_1_ack_out == 1'b1)))) begin
            sout_V_user_V_1_state <= 2'd2;
        end else if ((((sout_V_user_V_1_state == 2'd1) & (sout_V_user_V_1_ack_out == 1'b0)) | ((sout_V_user_V_1_state == 2'd3) & (sout_V_user_V_1_ack_out == 1'b0) & (sout_V_user_V_1_vld_in == 1'b1)))) begin
            sout_V_user_V_1_state <= 2'd1;
        end else if (((~((sout_V_user_V_1_vld_in == 1'b0) & (sout_V_user_V_1_ack_out == 1'b1)) & ~((sout_V_user_V_1_ack_out == 1'b0) & (sout_V_user_V_1_vld_in == 1'b1)) & (sout_V_user_V_1_state == 2'd3)) | ((sout_V_user_V_1_state == 2'd1) & (sout_V_user_V_1_ack_out == 1'b1)) | ((sout_V_user_V_1_state == 2'd2) & (sout_V_user_V_1_vld_in == 1'b1)))) begin
            sout_V_user_V_1_state <= 2'd3;
        end else begin
            sout_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_253_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_228 <= i_1_fu_259_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_228 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_253_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_urem_reg_239 <= idx_urem_fu_318_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        phi_urem_reg_239 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_609 <= exitcond1_fu_253_p2;
        kbuf_2_0_load_6_reg_652 <= kbuf_2_0_fu_132;
        kbuf_2_1_1_reg_603 <= kbuf_2_1_fu_136;
        tmp_3_reg_638_pp0_iter1_reg <= tmp_3_reg_638;
        tmp_last_V_reg_642_pp0_iter1_reg <= tmp_last_V_reg_642;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kbuf_0_0_fu_108 <= kbuf_0_1_fu_112;
        kbuf_1_0_fu_120 <= kbuf_1_1_fu_124;
        kbuf_1_0_s_fu_116 <= kbuf_1_0_fu_120;
        kbuf_2_0_fu_132 <= kbuf_2_1_1_reg_603;
        kbuf_2_0_s_fu_128 <= kbuf_2_0_fu_132;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_609 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kbuf_0_1_fu_112 <= lbuf_0_q0;
        kbuf_1_1_fu_124 <= kbuf_1_2_1_fu_379_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_277_p3 == 1'd0) & (exitcond1_fu_253_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kbuf_2_1_fu_136 <= sin_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_0_addr_reg_618 <= tmp_1_fu_265_p1;
        lbuf_1_addr_reg_629 <= tmp_1_fu_265_p1;
        tmp_3_reg_638 <= tmp_3_fu_294_p2;
        tmp_5_reg_624 <= tmp_5_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_609 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        result_2_1_1_reg_657 <= result_2_1_1_fu_457_p2;
        tmp6_reg_662 <= tmp6_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((sin_V_data_V_0_load_A == 1'b1)) begin
        sin_V_data_V_0_payload_A <= sin_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((sin_V_data_V_0_load_B == 1'b1)) begin
        sin_V_data_V_0_payload_B <= sin_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((sout_V_data_V_1_load_A == 1'b1)) begin
        sout_V_data_V_1_payload_A <= tmp_V_fu_543_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((sout_V_data_V_1_load_B == 1'b1)) begin
        sout_V_data_V_1_payload_B <= tmp_V_fu_543_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((sout_V_last_V_1_load_A == 1'b1)) begin
        sout_V_last_V_1_payload_A <= tmp_last_V_reg_642_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((sout_V_last_V_1_load_B == 1'b1)) begin
        sout_V_last_V_1_payload_B <= tmp_last_V_reg_642_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_3_reg_638_pp0_iter2_reg <= tmp_3_reg_638_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_fu_294_p2 == 1'd1) & (exitcond1_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_642 <= tmp_last_V_fu_300_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_0_ce0 = 1'b1;
    end else begin
        lbuf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_0_ce1 = 1'b1;
    end else begin
        lbuf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_609 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_0_we1 = 1'b1;
    end else begin
        lbuf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_1_ce0 = 1'b1;
    end else begin
        lbuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_1_ce1 = 1'b1;
    end else begin
        lbuf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_609 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_1_we1 = 1'b1;
    end else begin
        lbuf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_fu_277_p3 == 1'd0) & (exitcond1_fu_253_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sin_TDATA_blk_n = sin_V_data_V_0_state[1'd0];
    end else begin
        sin_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sin_V_data_V_0_ack_out = 1'b1;
    end else begin
        sin_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((sin_V_data_V_0_sel == 1'b1)) begin
        sin_V_data_V_0_data_out = sin_V_data_V_0_payload_B;
    end else begin
        sin_V_data_V_0_data_out = sin_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sin_V_dest_V_0_ack_out = 1'b1;
    end else begin
        sin_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_638_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        sout_TDATA_blk_n = sout_V_data_V_1_state[1'd1];
    end else begin
        sout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((sout_V_data_V_1_sel == 1'b1)) begin
        sout_V_data_V_1_data_out = sout_V_data_V_1_payload_B;
    end else begin
        sout_V_data_V_1_data_out = sout_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sout_V_data_V_1_vld_in = 1'b1;
    end else begin
        sout_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sout_V_dest_V_1_vld_in = 1'b1;
    end else begin
        sout_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sout_V_id_V_1_vld_in = 1'b1;
    end else begin
        sout_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sout_V_keep_V_1_vld_in = 1'b1;
    end else begin
        sout_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((sout_V_last_V_1_sel == 1'b1)) begin
        sout_V_last_V_1_data_out = sout_V_last_V_1_payload_B;
    end else begin
        sout_V_last_V_1_data_out = sout_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sout_V_last_V_1_vld_in = 1'b1;
    end else begin
        sout_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sout_V_strb_V_1_vld_in = 1'b1;
    end else begin
        sout_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sout_V_user_V_1_vld_in = 1'b1;
    end else begin
        sout_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((sout_V_dest_V_1_ack_in == 1'b0) | (sout_V_id_V_1_ack_in == 1'b0) | (sout_V_last_V_1_ack_in == 1'b0) | (sout_V_user_V_1_ack_in == 1'b0) | (sout_V_strb_V_1_ack_in == 1'b0) | (sout_V_keep_V_1_ack_in == 1'b0) | (sout_V_data_V_1_ack_in == 1'b0)) & (sout_V_dest_V_1_state[1'd0] == 1'b0) & (sout_V_id_V_1_state[1'd0] == 1'b0) & (sout_V_last_V_1_state[1'd0] == 1'b0) & (sout_V_user_V_1_state[1'd0] == 1'b0) & (sout_V_strb_V_1_state[1'd0] == 1'b0) & (sout_V_keep_V_1_state[1'd0] == 1'b0) & (sout_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((sin_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((sin_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((sin_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((sin_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op49_read_state2 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((tmp_3_reg_638_pp0_iter1_reg == 1'd1) & (sout_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((tmp_3_reg_638_pp0_iter2_reg == 1'd1) & (sout_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((sout_V_dest_V_1_ack_in == 1'b0) | (sout_V_id_V_1_ack_in == 1'b0) | (sout_V_last_V_1_ack_in == 1'b0) | (sout_V_user_V_1_ack_in == 1'b0) | (sout_V_strb_V_1_ack_in == 1'b0) | (sout_V_keep_V_1_ack_in == 1'b0) | (sout_V_data_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op49_read_state2 = ((tmp_fu_277_p3 == 1'd0) & (exitcond1_fu_253_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_253_p2 = ((i_reg_228 == 19'd262657) ? 1'b1 : 1'b0);

assign i_1_fu_259_p2 = (i_reg_228 + 19'd1);

assign icmp_fu_517_p2 = (($signed(tmp_4_fu_507_p4) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign idx_urem_fu_318_p3 = ((tmp_8_fu_312_p2[0:0] === 1'b1) ? next_urem_fu_306_p2 : 19'd0);

assign kbuf_1_2_1_fu_379_p3 = ((tmp_5_reg_624[0:0] === 1'b1) ? lbuf_1_q0 : kbuf_1_1_fu_124);

assign lbuf_0_address0 = tmp_1_fu_265_p1;

assign lbuf_1_address0 = tmp_1_fu_265_p1;

assign next_urem_fu_306_p2 = (phi_urem_reg_239 + 19'd1);

assign p_result_fu_523_p3 = ((icmp_fu_517_p2[0:0] === 1'b1) ? 12'd255 : result_2_2_2_fu_501_p2);

assign p_shl_cast_fu_453_p1 = p_shl_fu_445_p3;

assign p_shl_fu_445_p3 = {{kbuf_1_1_fu_124}, {3'd0}};

assign result_2_1_1_fu_457_p2 = (result_2_1_cast_fu_441_p1 - p_shl_cast_fu_453_p1);

assign result_2_1_cast_fu_441_p1 = result_2_1_fu_435_p2;

assign result_2_1_fu_435_p2 = (tmp1_cast_fu_421_p1 + tmp2_cast_fu_431_p1);

assign result_2_2_2_fu_501_p2 = (tmp5_fu_493_p2 + tmp6_cast_fu_498_p1);

assign sin_TREADY = sin_V_dest_V_0_state[1'd1];

assign sin_V_data_V_0_ack_in = sin_V_data_V_0_state[1'd1];

assign sin_V_data_V_0_load_A = (sin_V_data_V_0_state_cmp_full & ~sin_V_data_V_0_sel_wr);

assign sin_V_data_V_0_load_B = (sin_V_data_V_0_state_cmp_full & sin_V_data_V_0_sel_wr);

assign sin_V_data_V_0_sel = sin_V_data_V_0_sel_rd;

assign sin_V_data_V_0_state_cmp_full = ((sin_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign sin_V_data_V_0_vld_in = sin_TVALID;

assign sin_V_data_V_0_vld_out = sin_V_data_V_0_state[1'd0];

assign sin_V_dest_V_0_vld_in = sin_TVALID;

assign sout_TDATA = sout_V_data_V_1_data_out;

assign sout_TDEST = sout_V_dest_V_1_data_out;

assign sout_TID = sout_V_id_V_1_data_out;

assign sout_TKEEP = sout_V_keep_V_1_data_out;

assign sout_TLAST = sout_V_last_V_1_data_out;

assign sout_TSTRB = sout_V_strb_V_1_data_out;

assign sout_TUSER = sout_V_user_V_1_data_out;

assign sout_TVALID = sout_V_dest_V_1_state[1'd0];

assign sout_V_data_V_1_ack_in = sout_V_data_V_1_state[1'd1];

assign sout_V_data_V_1_ack_out = sout_TREADY;

assign sout_V_data_V_1_load_A = (sout_V_data_V_1_state_cmp_full & ~sout_V_data_V_1_sel_wr);

assign sout_V_data_V_1_load_B = (sout_V_data_V_1_state_cmp_full & sout_V_data_V_1_sel_wr);

assign sout_V_data_V_1_sel = sout_V_data_V_1_sel_rd;

assign sout_V_data_V_1_state_cmp_full = ((sout_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign sout_V_data_V_1_vld_out = sout_V_data_V_1_state[1'd0];

assign sout_V_dest_V_1_ack_in = sout_V_dest_V_1_state[1'd1];

assign sout_V_dest_V_1_ack_out = sout_TREADY;

assign sout_V_dest_V_1_data_out = 1'd0;

assign sout_V_dest_V_1_sel = sout_V_dest_V_1_sel_rd;

assign sout_V_dest_V_1_vld_out = sout_V_dest_V_1_state[1'd0];

assign sout_V_id_V_1_ack_in = sout_V_id_V_1_state[1'd1];

assign sout_V_id_V_1_ack_out = sout_TREADY;

assign sout_V_id_V_1_data_out = 1'd0;

assign sout_V_id_V_1_sel = sout_V_id_V_1_sel_rd;

assign sout_V_id_V_1_vld_out = sout_V_id_V_1_state[1'd0];

assign sout_V_keep_V_1_ack_in = sout_V_keep_V_1_state[1'd1];

assign sout_V_keep_V_1_ack_out = sout_TREADY;

assign sout_V_keep_V_1_data_out = 1'd1;

assign sout_V_keep_V_1_sel = sout_V_keep_V_1_sel_rd;

assign sout_V_keep_V_1_vld_out = sout_V_keep_V_1_state[1'd0];

assign sout_V_last_V_1_ack_in = sout_V_last_V_1_state[1'd1];

assign sout_V_last_V_1_ack_out = sout_TREADY;

assign sout_V_last_V_1_load_A = (sout_V_last_V_1_state_cmp_full & ~sout_V_last_V_1_sel_wr);

assign sout_V_last_V_1_load_B = (sout_V_last_V_1_state_cmp_full & sout_V_last_V_1_sel_wr);

assign sout_V_last_V_1_sel = sout_V_last_V_1_sel_rd;

assign sout_V_last_V_1_state_cmp_full = ((sout_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign sout_V_last_V_1_vld_out = sout_V_last_V_1_state[1'd0];

assign sout_V_strb_V_1_ack_in = sout_V_strb_V_1_state[1'd1];

assign sout_V_strb_V_1_ack_out = sout_TREADY;

assign sout_V_strb_V_1_data_out = 1'd0;

assign sout_V_strb_V_1_sel = sout_V_strb_V_1_sel_rd;

assign sout_V_strb_V_1_vld_out = sout_V_strb_V_1_state[1'd0];

assign sout_V_user_V_1_ack_in = sout_V_user_V_1_state[1'd1];

assign sout_V_user_V_1_ack_out = sout_TREADY;

assign sout_V_user_V_1_data_out = 1'd0;

assign sout_V_user_V_1_sel = sout_V_user_V_1_sel_rd;

assign sout_V_user_V_1_vld_out = sout_V_user_V_1_state[1'd0];

assign tmp1_cast_fu_421_p1 = tmp1_fu_415_p2;

assign tmp1_fu_415_p2 = (tmp_16_cast_fu_399_p1 + tmp_16_0_1_cast_fu_403_p1);

assign tmp2_cast_fu_431_p1 = tmp2_fu_425_p2;

assign tmp2_fu_425_p2 = (tmp_16_1_cast_fu_411_p1 + tmp_16_0_2_cast_fu_407_p1);

assign tmp5_fu_493_p2 = (tmp_16_2_cast_fu_490_p1 + result_2_1_1_reg_657);

assign tmp6_cast_fu_498_p1 = tmp6_reg_662;

assign tmp6_fu_484_p2 = (tmp_16_2_1_cast_fu_467_p1 + tmp7_cast_fu_480_p1);

assign tmp7_cast_fu_480_p1 = tmp7_fu_474_p2;

assign tmp7_fu_474_p2 = (tmp_16_2_2_cast_fu_470_p1 + tmp_16_1_2_cast_fu_463_p1);

assign tmp_16_0_1_cast_fu_403_p1 = kbuf_0_1_fu_112;

assign tmp_16_0_2_cast_fu_407_p1 = lbuf_0_q0;

assign tmp_16_1_2_cast_fu_463_p1 = kbuf_1_2_1_fu_379_p3;

assign tmp_16_1_cast_fu_411_p1 = kbuf_1_0_fu_120;

assign tmp_16_2_1_cast_fu_467_p1 = kbuf_2_1_1_reg_603;

assign tmp_16_2_2_cast_fu_470_p1 = kbuf_2_1_fu_136;

assign tmp_16_2_cast_fu_490_p1 = kbuf_2_0_load_6_reg_652;

assign tmp_16_cast_fu_399_p1 = kbuf_0_0_fu_108;

assign tmp_1_fu_265_p1 = phi_urem_reg_239;

assign tmp_3_fu_294_p2 = ((i_reg_228 > 19'd512) ? 1'b1 : 1'b0);

assign tmp_4_fu_507_p4 = {{result_2_2_2_fu_501_p2[11:8]}};

assign tmp_5_fu_271_p2 = ((i_reg_228 > 19'd508) ? 1'b1 : 1'b0);

assign tmp_6_fu_531_p3 = p_result_fu_523_p3[32'd11];

assign tmp_7_fu_539_p1 = p_result_fu_523_p3[7:0];

assign tmp_8_fu_312_p2 = ((next_urem_fu_306_p2 < 19'd509) ? 1'b1 : 1'b0);

assign tmp_V_fu_543_p3 = ((tmp_6_fu_531_p3[0:0] === 1'b1) ? 8'd0 : tmp_7_fu_539_p1);

assign tmp_fu_277_p3 = i_reg_228[32'd18];

assign tmp_last_V_fu_300_p2 = ((i_reg_228 == 19'd262656) ? 1'b1 : 1'b0);

endmodule //hw_conv
