#include <stdio.h>
#include <stdlib.h>


int main(void)
{
	uint32_t *regmap = (uint32_t *) 0x70000000; // base address of axi_regmap as set in the Vivado address editor

	printf("Testing logical unit");
	int i;
	for (i=1; i<10; i++) {
		int a = rand()%100;
		int b = rand()%100;
		int op= rand()%3; //op = 0000, 0001, 0010 or 0011 because we're testing logical unit
		size_t sh= 0b00000; // doesn't matter for now
		regmap[0]=a;
		regmap[1]=b;
		regmap[2]=op;  // A and B
		regmap[3]=sh; // we don't care about SHUMT here
		int r = regmap[0];
		if (op == 0) { // A and B
			printf("%d and %d = %d (%s)\n", a, b, r, (r==(a & b)) ? "COR":"ERR");
		}
		else if (op == 1) { // A or B
			printf("%d or %d = %d (%s)\n", a, b, r, (r==(a | b)) ? "COR":"ERR");
		}
		else if (op == 2) { //A xor B
			printf("%d xor %d = %d (%s)\n", a, b, r, (r==(a ^ b)) ? "COR":"ERR");
		}
		else { //A nor B
			printf("%d nor %d = %d (%s)\n", a, b, r, (r== !(a | b)) ? "COR":"ERR");
		}
	}
	return 0;
}
