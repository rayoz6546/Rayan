#include <stdio.h>
#include <stdlib.h>

size_t Random(size_t lower, size_t upper){
	size_t num = (rand() % (upper - lower + 1)) + lower;
	return num;
}

int main(void)
{
	uint32_t *regmap = (uint32_t *) 0x70000000; // base address of axi_regmap as set in the Vivado address editor

	/*printf("Testing logical unit");
	int i;
	for (i=1; i<10; i++) {
		size_t a = rand()%100;
		size_t b = rand()%100;
		size_t op= rand()%3; //op = 0000, 0001, 0010 or 0011 because we're testing logical unit
		size_t sh= 0b00000; // doesn't matter for now
		regmap[0]=a;
		regmap[1]=b;
		regmap[2]=op;  // A and B
		regmap[3]=sh; // we don't care about SHUMT here
		size_t r = regmap[0];
		if (op == 0) { // A and B
			printf("%2zu and %2zu = %d (%s)\n", a, b, r, (r==(a & b)) ? "COR":"ERR");
		}
		else if (op == 1) { // A or B
			printf("%2zu or %2zu = %d (%s)\n", a, b, r, (r==(a | b)) ? "COR":"ERR");
		}
		else if (op == 2) { //A xor B
			printf("%2zu xor %2zu = %d (%s)\n", a, b, r, (r==(a ^ b)) ? "COR":"ERR");
		}
		else { //A nor B
			printf("%2zu nor %2zu = %d (%s)\n", a, b, r, (r== !(a | b)) ? "COR":"ERR");
		}
	}*/

	/*printf("Testing arithmetic unit \n");
	int i;
		for (i=1; i<10; i++) {
			size_t a = rand()%100;
			size_t b = Random(-100,100);
			size_t op= rand()%3 + 4; //op = 0100, 0101, 0110 or 0111
			size_t sh= 0b00000; // doesn't matter for now
			regmap[0]=a;
			regmap[1]=b;
			regmap[2]=op;  // A and B
			regmap[3]=sh; // we don't care about SHUMT here
			size_t r = regmap[0];
			size_t ovf = regmap[4];
			size_t z = regmap[5];
			if (op==4) {
				if (op==4){
					printf("%d + %d = %d overflow=%2zu zero=%2zu (%s)\n", a, b, r, ovf, z, (r== a+b) ? "COR":"ERR");
				}
				else if (op ==6){
				printf("%d - %d = %d overflow=%2zu zero=%2zu (%s)\n", a, b, r, ovf, z, (r== a-b) ? "COR":"ERR");
				}
			}
			else {
				if (op==5){
					printf("%d + %d = %d overflow=%2zu zero=%2zu (%s)\n", a, b, r, ovf, z, (r== a+b) ? "COR":"ERR");
				}
				else if (op==7){
					printf("%d - %d = %d overflow=%2zu zero=%2zu (%s)\n", a, b, r, ovf, z, (r== a-b) ? "COR":"ERR");
			}
			}
		}*/

	/*printf("Testing comparator unit \n");

	//SLTU
	int i;
	for (i=1; i<10; i++) {
		size_t a = rand()%100;
		size_t b = rand()%100;
		size_t op= 11; //SLTU (1011)
		size_t sh= 0b00000; // we don't care here
		regmap[0]=a;
		regmap[1]=b;
		regmap[2]=op;  //
		regmap[3]=sh;
		size_t r = regmap[0];
		if (a<b){
			printf("%2zu < %2zu R=%x (%s)\n",a,b, r, (r!=0)? "COR":"ERR");
		}
		else if (a>b){
			printf("%2zu > %2zu R=%x (%s)\n",a,b, r, (r!=1)? "COR":"ERR");
		}
		else {
			printf("%2zu = %2zu R=%x (%s)\n",a,b, r, (r!=(a==b))? "COR":"ERR");
		}
		}*/

		printf("Testing shift unit \n");
		size_t a = 0xFEDCBA98;
		size_t b = rand()%100; // we don't care here
		size_t op= 0b1111; //op=1101 (sll), 1110 (srl) or 1111 (sra)
		size_t sh= 0b01110; // we don't care here
		regmap[0]=a;
		regmap[1]=b;
		regmap[2]=op;
		regmap[3]=sh;
		size_t r = regmap[0];
		printf("a=%x r=%d shumt=%2zu (%s)\n", a,r, sh, (r==a>>sh)? "COR":"ERR");
	return 0;
}
