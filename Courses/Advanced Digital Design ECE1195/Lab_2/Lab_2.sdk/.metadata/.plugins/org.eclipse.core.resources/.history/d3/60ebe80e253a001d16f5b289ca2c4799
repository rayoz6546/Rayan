#include <stdio.h>
#include <stdlib.h>


int main(void)
{
	uint32_t *regmap = (uint32_t *) 0x70000000; // base address of axi_regmap as set in the Vivado address editor
	/*
	printf("Testing logical unit \n");
	int i;
	for (i=1; i<10; i++) {
		size_t a = rand()%100;
		size_t b = rand()%100;
		size_t op= rand()%3; //op = 0000, 0001, 0010 or 0011 because we're testing logical unit
		size_t sh= 0b00000; // doesn't matter for now
		regmap[0]=a;
		regmap[1]=b;
		regmap[2]=op;  // A and B
		regmap[3]=sh; // we don't care about SHUMT here
		size_t r = regmap[0];
		if (op == 0) { // A and B
			printf("%2zu and %2zu = %3zu (%s)\n", a, b, r, (r==(a & b)) ? "COR":"ERR");
		}
		else if (op == 1) { // A or B
			printf("%2zu or %2zu = %3zu (%s)\n", a, b, r, (r==(a | b)) ? "COR":"ERR");
		}
		else if (op == 2) { //A xor B
			printf("%2zu xor %2zu = %3zu (%s)\n", a, b, r, (r==(a ^ b)) ? "COR":"ERR");
		}
		else { //A nor B
			printf("%2zu nor %2zu = %3zu (%s)\n", a, b, r, (r== !(a | b)) ? "COR":"ERR");
		}
	} */

	printf("Testing shift unit \n");
	size_t i;
	for (i=13; i<=15; i++){
		size_t a = 0xFEDCBA98;
		size_t b = rand()%100; // we don't care here
		size_t op= i; //op=1101 (i=13 decimal) (sll), 1110 (i=14)(srl) or 1111 (i=15) (sra)
		size_t sh= 0b01110;
		regmap[0]=a;
		regmap[1]=b;
		regmap[2]=op;
		regmap[3]=sh;
		size_t r = regmap[0];
		if (i==13){
			printf("a=%x shifted left (logical) by %2zu bits is r=%x (%s)\n",a,sh,r, (r==(a<<sh))? "COR":"ERR");
		}
		else if (i==14){
			printf("a=%x shifted right (logical) by %2zu bits is r=%x (%s)\n",a,sh,r, (r==(a>>sh))? "COR":"ERR");
		}
		else{
			printf("a=%x shifted right (arithmetic) by %2zu bits is r=%x (%s)\n",a,sh,r, (r==(a>>sh))? "COR":"ERR");
		}
	}
	return 0;
}
